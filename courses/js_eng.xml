<?xml version="1.0" encoding="UTF-8"?>
<course>
    <title>JavaScript Programming</title>
    <img src="img/js_eng.png" alt="JavaScript Programming"/>
    <sections>
        <section id="1">
            <title>Introduction to JavaScript</title>
            <topics>
                <topic id="1">
                    <title>What is JavaScript?</title>
                    <content>JavaScript is a versatile programming language primarily used for creating interactive web pages. It was created in 1995 by Brendan Eich and has since become one of the core technologies of the World Wide Web. 

Key Characteristics:
- Interpreted language: Code is executed directly, without needing compilation
- Dynamic typing: Variables can hold any type of data
- Multi-paradigm: Supports procedural, object-oriented, and functional programming
- Event-driven: Responds to user actions and browser events
- Single-threaded: Executes one operation at a time, with asynchronous capabilities

Core Use Cases:
1. Web Development:
   - Adding interactivity to web pages
   - Form validation and user input processing
   - DOM manipulation and dynamic content updates
   - Handling API calls and data fetching
   - Creating animations and visual effects

2. Beyond the Browser:
   - Server-side development with Node.js
   - Mobile app development with frameworks like React Native
   - Desktop applications using Electron
   - Game development
   - Browser extension development

Role in Web Development:
- HTML: Provides structure and content
- CSS: Handles styling and layout
- JavaScript: Adds behavior and functionality

Modern JavaScript Ecosystem:
- Rich package ecosystem through npm
- Numerous frameworks and libraries (React, Vue, Angular)
- Tools for building, testing, and deploying
- Strong developer community and resources</content>
                </topic>
                <topic id="1">
                    <title>Setting Up JavaScript</title>
                    <content>Understanding how to include and organize JavaScript in your projects is crucial for effective development.

Development Environment:
1. Text Editors and IDEs:
   - Visual Studio Code
   - WebStorm
   - Sublime Text
   - Atom
   Key features to look for:
   - Syntax highlighting
   - Code completion
   - Debugging capabilities
   - Extension support

2. Including JavaScript in Web Pages:
   a) Internal JavaScript:
      - Directly within HTML files
      - Best for small, page-specific scripts
      - Useful for prototyping and testing

   b) External JavaScript:
      - Separate .js files
      - Better for organization and maintenance
      - Enables browser caching
      - Promotes code reuse

   c) Browser Developer Tools:
      - Console for testing and debugging
      - Network panel for monitoring requests
      - Sources panel for debugging
      - Performance monitoring tools

Best Practices for Script Loading:
1. Script Placement:
   - Before closing &lt;/body&gt; tag for standard scripts
   - In &lt;head&gt; with 'defer' for modern applications
   - Using 'async' for independent scripts

2. Module System:
   - Using ES6 modules for better code organization
   - Breaking code into manageable pieces
   - Managing dependencies effectively

3. Development Workflow:
   - Using version control (Git)
   - Implementing a build process
   - Setting up linting and formatting
   - Organizing project structure</content>
                </topic>
                <topic id="1">
                    <title>JavaScript Fundamentals</title>
                    <content>JavaScript is built on several core concepts that provide the foundation for all JavaScript applications.

Core Programming Concepts:
1. Values and Types:
   - Understanding primitive vs reference types
   - Type coercion and conversion
   - Memory management basics
   - Understanding mutability

2. Program Structure:
   - Statements and expressions
   - Code blocks and scope
   - Lexical structure
   - Execution context

3. Functions and Modules:
   - Functions as first-class citizens
   - Different ways to create and use functions
   - Module system for code organization
   - Scope and closure concepts

4. Object-Oriented Programming:
   - Objects as fundamental building blocks
   - Prototypal inheritance
   - Class system in modern JavaScript
   - Encapsulation and abstraction

5. Asynchronous Programming:
   - Event loop understanding
   - Callbacks and their evolution
   - Promises and async/await
   - Error handling patterns

JavaScript's Unique Features:
1. Dynamic Nature:
   - Runtime type checking
   - Dynamic object modification
   - Flexible function arguments
   - Prototype-based inheritance

2. Functional Aspects:
   - Higher-order functions
   - Pure functions
   - Immutability concepts
   - Functional programming patterns

3. Browser Integration:
   - DOM interaction
   - Event handling
   - Browser APIs
   - Web Storage

Development Principles:
1. Code Organization:
   - Separation of concerns
   - DRY (Don't Repeat Yourself)
   - SOLID principles
   - Design patterns

2. Performance Considerations:
   - Memory management
   - Execution optimization
   - Resource loading
   - Code splitting

3. Modern Development:
   - ES6+ features overview
   - Build tools and bundlers
   - Testing frameworks
   - Development workflows</content>
                </topic>
            </topics>
        </section>
        <section id="2">
            <title>Basic JavaScript</title>
            <topics>
                <topic id="2">
                    <title>Variables and Data Types</title>
                    <content>In JavaScript, variables are like containers that store different types of information. JavaScript allows different ways to declare variables, and it also supports various types of data.

Declaring Variables:
JavaScript provides three main ways to declare variables:
- `let`: Used for variables that can change later
- `const`: Used for values that should not change
- `var`: An older way of declaring variables (not recommended in modern JavaScript)

Example:

let age = 25;      // Can be reassigned
const PI = 3.14;  // Cannot be changed
var name = "John"; // Older way (avoid using it)


Data Types in JavaScript:
JavaScript has two main categories of data types: Primitive and Reference.

Primitive Data Types:
1. Strings (text data enclosed in quotes)

let greeting = "Hello, World!";
let user = 'Alice';
let message = `Welcome, ${user}!`;


2. Numbers (both integers and floating-point values)

let count = 10;
let price = 99.99;
let scientific = 5e3; // 5000


3. Booleans (true or false values)

let isActive = true;
let isLoggedIn = false;


4. Undefined (when a variable is declared but not assigned)

let unknown;


5. Null (intentional empty value)

let emptyValue = null;


6. Symbols (unique identifiers, used in advanced cases)

let sym = Symbol('description');


Reference Data Types:
1. Objects (collections of key-value pairs)

let person = {
    name: "John",
    age: 30,
    isStudent: false
};


2. Arrays (ordered collections of values)

let colors = ["red", "green", "blue"];


3. Date Objects (representing dates and times)

let today = new Date();


Checking and Converting Data Types:
JavaScript allows checking and converting data types:
- Use `typeof` to check a variable’s type.
- Use methods like `parseInt()`, `parseFloat()`, and `String()` to convert data types.

Example:

console.log(typeof 42);       // "number"
console.log(typeof "Hello");  // "string"
console.log(typeof true);      // "boolean"


Key Takeaways:
1. Use `let` or `const` instead of `var`.
2. JavaScript automatically determines a variable’s type.
3. Use `typeof` to check data types.
4. Keep variable names meaningful and consistent.

Understanding variables and data types is crucial in JavaScript, as they form the foundation for building interactive web applications.</content>
                </topic>
                <topic id="2">
                    <title>Operators</title>
                    <content>Operators in JavaScript are special symbols that allow you to perform different types of operations on variables and values. Let's explore the different types of operators and how they work.

Arithmetic Operators:
These work like basic math operators:

// Addition (+)
let total = 5 + 3; // equals 8
let name = "Hello " + "World"; // equals "Hello World"

// Subtraction (-)
let difference = 10 - 4; // equals 6

// Multiplication (*)
let product = 4 * 3; // equals 12

// Division (/)
let result = 15 / 3; // equals 5

// Modulus (% - remainder)
let remainder = 17 % 5; // equals 2

// Exponentiation (**)
let squared = 4 ** 2; // equals 16


Comparison Operators:
These compare values and return `true` or `false`:

// Equal to (== vs ===)
5 == "5"; // true (loose equality, allows type conversion)
5 === "5"; // false (strict equality, no type conversion)

// Not equal to (!= vs !==)
5 != "5"; // false
5 !== "5"; // true

// Greater and less than operators
7 > 5; // true
5 &lt; 7; // true
7 >= 7; // true
5 &lt;= 7; // true


Logical Operators:
Used to combine conditions:

// AND (&#38;&#38;)
true &#38;&#38; true; // true
true &#38;&#38; false; // false

// OR (||)
true || false; // true
false || false; // false

// NOT (!)
!true; // false
!false; // true


Assignment Operators:
These modify variable values efficiently:

let x = 5; // Assignment
x += 3; // Same as: x = x + 3
x -= 2; // Same as: x = x - 2
x *= 4; // Same as: x = x * 4
x /= 2; // Same as: x = x / 2


Bitwise Operators:
Used for operations at the binary level:

let a = 5; // 0101 in binary
let b = 3; // 0011 in binary

let andResult = a &#38; b; // 0001 (1 in decimal)
let orResult = a | b; // 0111 (7 in decimal)
let xorResult = a ^ b; // 0110 (6 in decimal)


Special Operators:
Some unique operators in JavaScript:

typeof 42; // "number"
typeof "Hello"; // "string"

let obj = {name: "Alice"};
console.log("name" in obj); // true (checks if property exists)

let person = new Date();
console.log(person instanceof Date); // true (checks object type)


Operator Precedence:
Like in math, JavaScript follows a specific order when evaluating expressions. Use parentheses `()` to control the order.

let result = 5 + 3 * 2; // result is 11, multiplication happens first
let correctResult = (5 + 3) * 2; // result is 16, parentheses override default precedence


Key Takeaways:
1. Use `===` instead of `==` to avoid type coercion issues.
2. Logical operators help in building complex conditions.
3. Use `+=`, `-=`, etc., for cleaner code.
4. Use parentheses to ensure the correct order of operations.

Understanding operators is essential for writing effective JavaScript programs. With these basics, you can perform calculations, make decisions, and control the flow of your code efficiently.</content>
                </topic>
                <topic id="2">
                    <title>Functions</title>
                    <content>Functions in JavaScript are like reusable blocks of code that perform specific tasks. They help make code modular, efficient, and easy to maintain. Think of functions as predefined instructions, like "calculate the sum" or "greet a user."

Defining a Function
To create a function, use the `function` keyword, followed by a name and parameters:

// Function to add two numbers
function add(a, b) {
    return a + b;
}

// Function to print a message
function greet(name) {
    console.log("Hello, " + name + "!");
}


Calling a Function
Once defined, you can call a function by using its name and passing required arguments:

let sum = add(5, 3); // Calls the add function
console.log("Sum:", sum);

greet("Alice"); // Calls the greet function


Function Parameters and Default Values
You can pass values to functions using parameters:

// Function with default parameters
function greetUser(name = "Guest") {
    console.log("Hello, " + name + "!");
}

greetUser(); // Output: Hello, Guest!
greetUser("Bob"); // Output: Hello, Bob!


Return Values
Functions can return values to the caller:

function square(num) {
    return num * num;
}

let result = square(4); // result = 16


Arrow Functions (ES6+)
Arrow functions offer a concise syntax:

const multiply = (a, b) => a * b;
console.log(multiply(4, 3)); // Output: 12


Function Expressions
Functions can be assigned to variables:

const greet = function(name) {
    return "Hello, " + name + "!";
};
console.log(greet("Charlie"));


Higher-Order Functions
Functions can accept other functions as arguments:

function applyOperation(a, b, operation) {
    return operation(a, b);
}

console.log(applyOperation(5, 3, add)); // Output: 8


Closures
Closures allow functions to remember their surrounding scope:

function counter() {
    let count = 0;
    return function() {
        return ++count;
    };
}

const increment = counter();
console.log(increment()); // Output: 1
console.log(increment()); // Output: 2


Immediately Invoked Function Expressions (IIFE)
IIFEs run immediately after being defined:

(function() {
    console.log("This runs immediately!");
})();


Asynchronous Functions
JavaScript supports asynchronous functions using `async/await`:

async function fetchData() {
    let response = await fetch("https://api.example.com/data");
    let data = await response.json();
    console.log(data);
}


Function Best Practices
1. Use meaningful function names.
2. Keep functions small and focused on a single task.
3. Use default parameters to handle missing arguments.
4. Avoid using global variables inside functions.
5. Use `const` or `let` instead of `var` to avoid unintended behavior.

Mastering functions in JavaScript is key to writing clean, reusable, and efficient code.</content>
                </topic>
            </topics>
        </section>
        <section id="3">
            <title>Control Structures</title>
            <topics>
                <topic id="3">
                    <title>If Statements</title>
                    <content>If statements are fundamental control structures in JavaScript that enable conditional execution of code:

Basic If Statement:
if (condition) {
    // code to execute if condition is true
}

If-Else Statement:
if (condition) {
    // code if true
} else {
    // code if false
}

If-Else If-Else Chain:
if (condition1) {
    // code if condition1 is true
} else if (condition2) {
    // code if condition2 is true
} else {
    // code if all conditions are false
}

3. Truthy and Falsy Values:
   Falsy values include:
   - false
   - 0
   - "" (empty string)
   - null
   - undefined
   - NaN
   Everything else is considered truthy

Nested If Statements:
if (condition1) {
    if (condition2) {
        // nested code
    }
}

Ternary Operator (Shorthand If):
condition ? valueIfTrue : valueIfFalse

Best Practices:
- Use === instead of == for strict comparison
- Keep conditions simple and readable
- Consider using early returns
- Use meaningful condition names
- Avoid deeply nested if statements</content>
                </topic>
                <topic id="3">
                    <title>Loops</title>
                    <content>JavaScript provides several types of loops for iterating over data and executing repeated operations:

For Loop:
for (initialization; condition; increment/decrement) {
    // code to repeat
}
Example:
for (let i = 0; i &lt; 5; i++) {
    console.log(i);
}

For...of Loop (ES6+):
Used for iterating over iterable objects (arrays, strings, etc.)
for (const element of array) {
    // code using element
}

For...in Loop:
Used for iterating over object properties
for (const key in object) {
    if (object.hasOwnProperty(key)) {
        // code using object[key]
    }
}

While Loop:
while (condition) {
    // code to repeat
    // must include way to eventually break condition
}

Do-While Loop:
do {
    // code to repeat
} while (condition);

Array Methods as Alternatives to Loops:
1. forEach():
   array.forEach(element => {
       // code for each element
   });

2. map():
   const newArray = array.map(element => {
       return // transformed element
   });

3. filter():
   const filteredArray = array.filter(element => {
       return // condition
   });

4. reduce():
   const result = array.reduce((acc, curr) => {
       return // accumulated value
   }, initialValue);

Loop Control Statements:
- break: Exits the loop completely
- continue: Skips to the next iteration
- labels: Identifies a loop for break/continue in nested loops

Performance Considerations:
- Cache array length in for loops
- Choose appropriate loop type for the task
- Consider using array methods for better readability
- Avoid infinite loops
- Be cautious with heavy operations in loops</content>
                </topic>
                <topic id="3">
                    <title>Switch Statements</title>
                    <content>Switch statements provide a clean way to handle multiple conditions based on a single value:

Basic Syntax:
switch (expression) {
    case value1:
        // code for value1
        break;
    case value2:
        // code for value2
        break;
    default:
        // code if no case matches
}

Features and Characteristics:

1. Case Values:
   - Must be unique
   - Can be:
     * Numbers
     * Strings
     * Expressions that evaluate to a value
   - Cannot be variables or ranges

2. Break Statement:
   - Ends case execution
   - Without break, execution "falls through" to next case
   - Intentional fall-through can be useful in some cases
   Example:
   switch (fruit) {
       case 'apple':
       case 'pear':
           console.log('Common fruit');
           break;
       default:
           console.log('Unknown fruit');
   }

3. Default Case:
   - Optional
   - Executes when no case matches
   - Can appear anywhere but typically last
   - Only one default allowed

Best Practices:
1. Always use break statements unless fall-through is intentional
2. Document intentional fall-through with comments
3. Consider using object literals for simple value mappings
4. Use if-else for:
   - Complex conditions
   - Range comparisons
   - Type checking
5. Keep cases simple and focused

Alternative to Switch:
const actions = {
    'A': () => console.log('Excellent'),
    'B': () => console.log('Good'),
    'C': () => console.log('Fair'),
    'default': () => console.log('Invalid Grade')
};
(actions[grade] || actions['default'])();</content>
                </topic>
            </topics>
        </section>
        <section id="4">
            <title>DOM Manipulation</title>
            <topics>
                <topic id="4">
                    <title>Selecting Elements</title>
                    <content>The Document Object Model (DOM) provides various methods to select HTML elements:

Single Element Selection:
1. getElementById():
   const element = document.getElementById('myId');

2. querySelector():
   const element = document.querySelector('.myClass');
   const element = document.querySelector('#myId');
   const element = document.querySelector('div > p');

Multiple Element Selection:
1. getElementsByClassName():
   const elements = document.getElementsByClassName('myClass');

2. getElementsByTagName():
   const elements = document.getElementsByTagName('div');

3. querySelectorAll():
   const elements = document.querySelectorAll('.myClass');

Traversing the DOM:
1. Parent Elements:
   element.parentElement
   element.parentNode

2. Child Elements:
   element.children
   element.childNodes
   element.firstElementChild
   element.lastElementChild

3. Sibling Elements:
   element.nextElementSibling
   element.previousElementSibling

Checking Element Existence:
if (document.querySelector('.myClass')) {
    // Element exists
}

Best Practices:
- Cache DOM selections in variables for reuse
- Use more specific selectors for better performance
- Prefer querySelector for modern applications
- Consider using data-attributes for JavaScript hooks
- Avoid selecting elements by tag names alone</content>
                </topic>
                <topic id="4">
                    <title>Modifying Elements</title>
                    <content>Once elements are selected, JavaScript provides numerous ways to modify them:

Content Modification:
1. Text Content:
   element.textContent = 'New text';
   element.innerText = 'New text';

2. HTML Content:
   element.innerHTML = '<span>New HTML</span>';
   element.insertAdjacentHTML('beforeend', '<div>New content</div>');

Attribute Manipulation:
1. Setting Attributes:
   element.setAttribute('class', 'newClass');
   element.id = 'newId';
   element.src = 'new-image.jpg';

2. Getting Attributes:
   const value = element.getAttribute('class');
   const value = element.id;

3. Data Attributes:
   element.dataset.customAttribute = 'value';

Style Manipulation:
1. Direct Style Changes:
   element.style.backgroundColor = 'red';
   element.style.fontSize = '16px';
   element.style.display = 'none';

2. CSS Classes:
   element.classList.add('newClass');
   element.classList.remove('oldClass');
   element.classList.toggle('active');
   element.classList.replace('old', 'new');

Creating &#38; Removing Elements:
1. Creation:
   const newElement = document.createElement('div');
   newElement.textContent = 'New Element';

2. Insertion:
   parentElement.appendChild(newElement);
   parentElement.insertBefore(newElement, referenceElement);
   element.before(newElement);
   element.after(newElement);

3. Removal:
   element.remove();
   parentElement.removeChild(element);

Element Dimensions and Position:
1. Size:
   element.clientWidth
   element.clientHeight
   element.getBoundingClientRect()

2. Position:
   element.offsetTop
   element.offsetLeft

Best Practices:
- Minimize DOM manipulation for better performance
- Batch DOM updates when possible
- Use document fragments for multiple insertions
- Prefer classList over direct className manipulation
- Consider CSS transitions for animations</content>
                </topic>
                <topic id="4">
                    <title>Event Handling</title>
                    <content>JavaScript can respond to user interactions and browser events through event handlers:

Adding Event Listeners:
1. Modern Method:
   element.addEventListener('click', function(event) {
       // Handler code
   });

2. Multiple Listeners:
   element.addEventListener('click', handlerOne);
   element.addEventListener('click', handlerTwo);

Common Event Types:
1. Mouse Events:
   - click
   - dblclick
   - mouseenter
   - mouseleave
   - mousemove
   - mousedown
   - mouseup

2. Keyboard Events:
   - keydown
   - keyup
   - keypress

3. Form Events:
   - submit
   - change
   - input
   - focus
   - blur

4. Document/Window Events:
   - load
   - DOMContentLoaded
   - resize
   - scroll

Event Object Properties:
1. Common Properties:
   event.target        // Element that triggered the event
   event.currentTarget // Element that listener is attached to
   event.type         // Type of event
   event.timestamp    // When event occurred

2. Prevention Methods:
   event.preventDefault()  // Prevent default behavior
   event.stopPropagation() // Stop event bubbling

Event Delegation:
document.getElementById('parent').addEventListener('click', function(e) {
    if (e.target.matches('.child-class')) {
        // Handle child element events
    }
});

Removing Event Listeners:
element.removeEventListener('click', handlerFunction);

Custom Events:
const customEvent = new CustomEvent('myEvent', {
    detail: { data: 'value' }
});
element.dispatchEvent(customEvent);

Best Practices:
1. Use Event Delegation for Dynamic Elements
2. Clean up event listeners when elements are removed
3. Debounce/throttle frequent events (scroll, resize)
4. Use passive listeners for scroll performance
5. Prefer arrow functions to maintain 'this' context
6. Handle errors in event listeners
7. Consider accessibility in event handling</content>
                </topic>
            </topics>
        </section>
        <section id="5">
            <title>Advanced Topics</title>
            <topics>
                <topic id="5">
                    <title>Asynchronous JavaScript</title>
                    <content>JavaScript offers several approaches to handle asynchronous operations:

Callbacks:
Traditional approach using nested functions
function fetchData(callback) {
    setTimeout(() => {
        const data = { id: 1, name: 'Example' };
        callback(data);
    }, 1000);
}

Promises:
1. Creating Promises:
const myPromise = new Promise((resolve, reject) => {
    // Async operation
    if (success) {
        resolve(data);
    } else {
        reject(error);
    }
});

2. Using Promises:
myPromise
    .then(data => {
        // Handle success
    })
    .catch(error => {
        // Handle error
    })
    .finally(() => {
        // Always executes
    });

3. Promise Methods:
- Promise.all([promise1, promise2])
- Promise.race([promise1, promise2])
- Promise.allSettled([promise1, promise2])
- Promise.any([promise1, promise2])

Async/Await:
1. Basic Usage:
async function getData() {
    try {
        const response = await fetch(url);
        const data = await response.json();
        return data;
    } catch (error) {
        console.error(error);
    }
}

2. Parallel Execution:
async function getMultipleData() {
    const [data1, data2] = await Promise.all([
        fetch(url1),
        fetch(url2)
    ]);
}

Error Handling:
1. Try-Catch with Async/Await
2. .catch() with Promises
3. Error Events with Callbacks

Best Practices:
- Avoid callback hell using Promises or Async/Await
- Always handle errors appropriately
- Use Promise.all for parallel operations
- Consider request cancellation with AbortController
- Implement proper loading and error states</content>
                </topic>
                <topic id="5">
                    <title>APIs and Fetch</title>
                    <content>Modern JavaScript uses the Fetch API for making HTTP requests:

Basic Fetch Usage:
1. GET Request:
fetch('https://api.example.com/data')
    .then(response => response.json())
    .then(data => console.log(data));

2. POST Request:
fetch('https://api.example.com/data', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        key: 'value'
    })
});

Request Configuration:
1. HTTP Methods:
- GET (default)
- POST
- PUT
- DELETE
- PATCH
- OPTIONS

2. Headers:
const headers = new Headers({
    'Authorization': 'Bearer token',
    'Content-Type': 'application/json'
});

3. Request Options:
- mode: 'cors', 'no-cors', 'same-origin'
- credentials: 'include', 'same-origin'
- cache: 'no-cache', 'reload'
- redirect: 'follow', 'error'
- referrerPolicy: 'no-referrer'

Response Handling:
1. Response Methods:
- response.json()
- response.text()
- response.blob()
- response.formData()
- response.arrayBuffer()

2. Response Properties:
- response.status
- response.ok
- response.headers
- response.statusText

Error Handling:
1. Network Errors
2. HTTP Error Responses
3. Timeout Handling
4. Response Validation

Advanced Features:
1. Request Cancellation:
const controller = new AbortController();
fetch(url, { signal: controller.signal });
controller.abort();

2. Progress Monitoring (with ReadableStream)
3. File Upload with FormData
4. Handling CORS issues

Best Practices:
- Implement proper error handling
- Use appropriate HTTP methods
- Set correct Content-Type headers
- Handle loading and error states
- Consider implementing retry logic
- Cache responses when appropriate</content>
                </topic>
                <topic id="5">
                    <title>ES6+ Features</title>
                    <content>Modern JavaScript (ES6 and beyond) introduced many powerful features:

Destructuring:
1. Array Destructuring:
const [first, second, ...rest] = array;

2. Object Destructuring:
const { name, age, ...others } = person;
const { name: firstName } = person;

Spread/Rest Operators:
1. Spread in Arrays:
const newArray = [...oldArray, newItem];

2. Spread in Objects:
const newObj = { ...oldObj, newProp: value };

3. Rest Parameters:
function sum(...numbers) {
    return numbers.reduce((a, b) => a + b);
}

Enhanced Object Literals:
1. Shorthand Properties:
const name = 'John';
const obj = { name };

2. Computed Properties:
const key = 'dynamic';
const obj = {
    [key]: value
};

3. Method Shorthand:
const obj = {
    method() {
        // code
    }
};

Classes:
class MyClass {
    constructor() {
        // initialization
    }
    
    method() {
        // method code
    }
    
    static staticMethod() {
        // static method
    }
}

Modules:
1. Export:
export const name = 'value';
export default class {};

2. Import:
import { name } from './module';
import DefaultExport from './module';

Other Notable Features:
1. Optional Chaining:
const value = obj?.prop?.method?.();

2. Nullish Coalescing:
const value = null ?? defaultValue;

3. Private Class Fields:
class Example {
    #privateField = value;
}

4. BigInt:
const bigNumber = 9007199254740991n;

5. globalThis:
const global = globalThis;

6. Top-level await:
const data = await fetch(url);

Best Practices:
- Use const by default, let when needed
- Leverage destructuring for cleaner code
- Utilize spread operator for immutable operations
- Implement proper module organization
- Use optional chaining for safe property access
- Consider browser compatibility</content>
                </topic>
            </topics>
        </section>
    </sections>
    <quizes>
        <quiz id="1">
            <question id="1">
                <text>What is JavaScript primarily used for?</text>
                <answers id="1">
                    <answer correct="false">Styling web pages</answer>
                    <answer correct="true">Adding interactivity to web pages</answer>
                    <answer correct="false">Managing databases</answer>
                    <answer correct="false">Server configuration</answer>
                </answers>
            </question>
            <question id="1">
                <text>Which of the following is NOT a key characteristic of JavaScript?</text>
                <answers id="1">
                    <answer correct="false">Interpreted language</answer>
                    <answer correct="false">Dynamic typing</answer>
                    <answer correct="false">Event-driven</answer>
                    <answer correct="true">Strictly typed</answer>
                </answers>
            </question>
            <question id="1">
                <text>Where is the best place to include JavaScript for better performance?</text>
                <answers id="1">
                    <answer correct="false">Inside the &lt;head&gt; tag without any attributes</answer>
                    <answer correct="true">Before the closing &lt;/body&gt; tag</answer>
                    <answer correct="false">Inside a &lt;div&gt; tag</answer>
                    <answer correct="false">At the very beginning of the HTML file</answer>
                </answers>
            </question>
            <question id="1">
                <text>Which JavaScript feature allows code to execute asynchronously?</text>
                <answers id="1">
                    <answer correct="false">Object-oriented programming</answer>
                    <answer correct="false">Prototypal inheritance</answer>
                    <answer correct="true">Event loop</answer>
                    <answer correct="false">Strict equality</answer>
                </answers>
            </question>
            <question id="1">
                <text>Which of the following is a JavaScript framework or library?</text>
                <answers id="1">
                    <answer correct="false">Django</answer>
                    <answer correct="false">Laravel</answer>
                    <answer correct="true">React</answer>
                    <answer correct="false">Flask</answer>
                </answers>
            </question>
        </quiz>

        <quiz id="2">
            <question id="2">
                <text>Which keyword should you use to declare a constant variable in JavaScript?</text>
                <answers id="2">
                    <answer correct="false">var</answer>
                    <answer correct="true">const</answer>
                    <answer correct="false">let</answer>
                    <answer correct="false">static</answer>
                </answers>
            </question>
            <question id="2">
                <text>What is the output of `typeof null` in JavaScript?</text>
                <answers id="2">
                    <answer correct="false">"null"</answer>
                    <answer correct="false">"undefined"</answer>
                    <answer correct="true">"object"</answer>
                    <answer correct="false">"string"</answer>
                </answers>
            </question>
            <question id="2">
                <text>What will be the output of the following expression? `5 == "5"`</text>
                <answers id="2">
                    <answer correct="false">false</answer>
                    <answer correct="true">true</answer>
                    <answer correct="false">null</answer>
                    <answer correct="false">undefined</answer>
                </answers>
            </question>
            <question id="2">
                <text>Which of the following is NOT a valid JavaScript data type?</text>
                <answers id="2">
                    <answer correct="false">String</answer>
                    <answer correct="false">Boolean</answer>
                    <answer correct="false">Number</answer>
                    <answer correct="true">Character</answer>
                </answers>
            </question>
            <question id="2">
                <text>How do you define an arrow function in JavaScript?</text>
                <answers id="2">
                    <answer correct="false">function myFunc() => {}</answer>
                    <answer correct="false">let myFunc = function() {}</answer>
                    <answer correct="true">let myFunc = () => {}</answer>
                    <answer correct="false">arrow myFunc() {}</answer>
                </answers>
            </question>
        </quiz>

        <quiz id="3">
            <question id="3">
                <text>What is the purpose of an if statement in JavaScript?</text>
                <answers id="3">
                    <answer correct="true">To execute code conditionally</answer>
                    <answer correct="false">To declare a variable</answer>
                    <answer correct="false">To define a function</answer>
                    <answer correct="false">To iterate over an array</answer>
                </answers>
            </question>
            <question id="3">
                <text>Which of the following is a falsy value in JavaScript?</text>
                <answers id="3">
                    <answer correct="false">"Hello"</answer>
                    <answer correct="false">42</answer>
                    <answer correct="true">0</answer>
                    <answer correct="false">{}</answer>
                </answers>
            </question>
            <question id="3">
                <text>Which loop is best suited for iterating over an array in ES6+?</text>
                <answers id="3">
                    <answer correct="false">for...in</answer>
                    <answer correct="true">for...of</answer>
                    <answer correct="false">while</answer>
                    <answer correct="false">do...while</answer>
                </answers>
            </question>
            <question id="3">
                <text>What will happen if a break statement is omitted in a switch case?</text>
                <answers id="3">
                    <answer correct="true">The execution will "fall through" to the next case</answer>
                    <answer correct="false">The switch statement will terminate</answer>
                    <answer correct="false">An error will occur</answer>
                    <answer correct="false">Only the default case will execute</answer>
                </answers>
            </question>
            <question id="3">
                <text>Which method can be used as an alternative to loops for iterating over an array?</text>
                <answers id="3">
                    <answer correct="false">switch()</answer>
                    <answer correct="true">forEach()</answer>
                    <answer correct="false">if-else</answer>
                    <answer correct="false">typeof()</answer>
                </answers>
            </question>
        </quiz>

        <quiz id="4">
            <question id="4">
                <text>Which method is used to select an element by its ID?</text>
                <answers id="4">
                    <answer correct="true">getElementById()</answer>
                    <answer correct="false">querySelectorAll()</answer>
                    <answer correct="false">getElementsByClassName()</answer>
                    <answer correct="false">getElementsByTagName()</answer>
                </answers>
            </question>
            <question id="4">
                <text>What is the recommended method to add an event listener to an element?</text>
                <answers id="4">
                    <answer correct="false">element.onclick = function() {}</answer>
                    <answer correct="true">element.addEventListener('click', function(event) {})</answer>
                    <answer correct="false">element.on('click', function(event) {})</answer>
                    <answer correct="false">element.setEventListener('click', function(event) {})</answer>
                </answers>
            </question>
            <question id="4">
                <text>Which property returns the first child element of a selected parent element?</text>
                <answers id="4">
                    <answer correct="false">element.children[0]</answer>
                    <answer correct="false">element.childNodes</answer>
                    <answer correct="true">element.firstElementChild</answer>
                    <answer correct="false">element.parentElement</answer>
                </answers>
            </question>
            <question id="4">
                <text>Which method prevents the default behavior of an event?</text>
                <answers id="4">
                    <answer correct="true">event.preventDefault()</answer>
                    <answer correct="false">event.stopPropagation()</answer>
                    <answer correct="false">event.prevent()</answer>
                    <answer correct="false">event.stopDefault()</answer>
                </answers>
            </question>
            <question id="4">
                <text>What is the best way to dynamically insert a new element into the DOM?</text>
                <answers id="4">
                    <answer correct="false">document.write(newElement)</answer>
                    <answer correct="false">element.innerHTML += newElement</answer>
                    <answer correct="true">parentElement.appendChild(newElement)</answer>
                    <answer correct="false">element.insert(newElement)</answer>
                </answers>
            </question>
        </quiz>

        <quiz id="5">
            <question id="5">
                <text>Which of the following is NOT a method for handling asynchronous operations in JavaScript?</text>
                <answers id="5">
                    <answer correct="false">Callbacks</answer>
                    <answer correct="false">Promises</answer>
                    <answer correct="true">Synchronous Functions</answer>
                    <answer correct="false">Async/Await</answer>
                </answers>
            </question>
            <question id="5">
                <text>What does the fetch API return?</text>
                <answers id="5">
                    <answer correct="false">XMLHttpRequest</answer>
                    <answer correct="true">A Promise</answer>
                    <answer correct="false">A JSON object</answer>
                    <answer correct="false">A String</answer>
                </answers>
            </question>
            <question id="5">
                <text>Which Promise method waits for all promises to resolve or reject before returning?</text>
                <answers id="5">
                    <answer correct="false">Promise.race()</answer>
                    <answer correct="true">Promise.all()</answer>
                    <answer correct="false">Promise.any()</answer>
                    <answer correct="false">Promise.resolve()</answer>
                </answers>
            </question>
            <question id="5">
                <text>How can you destructure an object property in JavaScript?</text>
                <answers id="5">
                    <answer correct="false">const name = person.name;</answer>
                    <answer correct="true">const { name } = person;</answer>
                    <answer correct="false">person = { name };</answer>
                    <answer correct="false">const name = { person };</answer>
                </answers>
            </question>
            <question id="5">
                <text>Which of the following is NOT an ES6+ feature?</text>
                <answers id="5">
                    <answer correct="false">Optional Chaining</answer>
                    <answer correct="false">Nullish Coalescing</answer>
                    <answer correct="false">Top-level Await</answer>
                    <answer correct="true">XMLHttpRequest</answer>
                </answers>
            </question>
        </quiz>
        
        <quiz id="6">
            <question id="6">
                <text>What is JavaScript primarily used for?</text>
                <answers id="6">
                    <answer correct="false">Styling web pages</answer>
                    <answer correct="true">Adding interactivity to web pages</answer>
                    <answer correct="false">Managing databases</answer>
                    <answer correct="false">Server configuration</answer>
                </answers>
            </question>
            <question id="6">
                <text>Which keyword should you use to declare a constant variable in JavaScript?</text>
                <answers id="6">
                    <answer correct="false">var</answer>
                    <answer correct="true">const</answer>
                    <answer correct="false">let</answer>
                    <answer correct="false">static</answer>
                </answers>
            </question>
            <question id="6">
                <text>What is the output of `typeof null` in JavaScript?</text>
                <answers id="6">
                    <answer correct="false">"null"</answer>
                    <answer correct="false">"undefined"</answer>
                    <answer correct="true">"object"</answer>
                    <answer correct="false">"string"</answer>
                </answers>
            </question>
            <question id="6">
                <text>Which method prevents the default behavior of an event?</text>
                <answers id="6">
                    <answer correct="true">event.preventDefault()</answer>
                    <answer correct="false">event.stopPropagation()</answer>
                    <answer correct="false">event.prevent()</answer>
                    <answer correct="false">event.stopDefault()</answer>
                </answers>
            </question>
            <question id="6">
                <text>What does the fetch API return?</text>
                <answers id="6">
                    <answer correct="false">XMLHttpRequest</answer>
                    <answer correct="true">A Promise</answer>
                    <answer correct="false">A JSON object</answer>
                    <answer correct="false">A String</answer>
                </answers>
            </question>
            <question id="6">
                <text>Which operator is used for strict equality comparison in JavaScript?</text>
                <answers id="6">
                    <answer correct="false">==</answer>
                    <answer correct="true">===</answer>
                    <answer correct="false">=</answer>
                    <answer correct="false">=></answer>
                </answers>
            </question>
            <question id="6">
                <text>What is the purpose of the async/await syntax in JavaScript?</text>
                <answers id="6">
                    <answer correct="true">To handle asynchronous operations more cleanly</answer>
                    <answer correct="false">To make code execute faster</answer>
                    <answer correct="false">To create new functions</answer>
                    <answer correct="false">To handle DOM events</answer>
                </answers>
            </question>
            <question id="6">
                <text>Which method is used to add a new element at the end of an array?</text>
                <answers id="6">
                    <answer correct="false">push()</answer>
                    <answer correct="false">unshift()</answer>
                    <answer correct="true">append()</answer>
                    <answer correct="false">add()</answer>
                </answers>
            </question>
            <question id="6">
                <text>What is event delegation in JavaScript?</text>
                <answers id="6">
                    <answer correct="true">A technique to handle events on dynamic elements by attaching a single event listener to a parent element</answer>
                    <answer correct="false">A way to prevent event propagation</answer>
                    <answer correct="false">A method to create custom events</answer>
                    <answer correct="false">A technique to remove event listeners</answer>
                </answers>
            </question>
            <question id="6">
                <text>Which ES6+ feature allows for unpacking values from arrays or properties from objects?</text>
                <answers id="6">
                    <answer correct="false">Spread operator</answer>
                    <answer correct="true">Destructuring</answer>
                    <answer correct="false">Rest parameters</answer>
                    <answer correct="false">Template literals</answer>
                </answers>
            </question>
            <question id="6">
                <text>What is the purpose of the 'use strict' directive in JavaScript?</text>
                <answers id="6">
                    <answer correct="true">To enable strict mode and catch common coding mistakes</answer>
                    <answer correct="false">To make the code execute faster</answer>
                    <answer correct="false">To enable new JavaScript features</answer>
                    <answer correct="false">To prevent memory leaks</answer>
                </answers>
            </question>
            <question id="6">
                <text>Which loop is most appropriate for iterating over object properties?</text>
                <answers id="6">
                    <answer correct="false">for...of</answer>
                    <answer correct="true">for...in</answer>
                    <answer correct="false">forEach</answer>
                    <answer correct="false">while</answer>
                </answers>
            </question>
            <question id="6">
                <text>What is the purpose of the Promise.all() method?</text>
                <answers id="6">
                    <answer correct="true">To wait for all promises to resolve</answer>
                    <answer correct="false">To execute promises sequentially</answer>
                    <answer correct="false">To cancel all pending promises</answer>
                    <answer correct="false">To reject all promises</answer>
                </answers>
            </question>
            <question id="6">
                <text>Which method is used to convert a JSON string to a JavaScript object?</text>
                <answers id="6">
                    <answer correct="false">JSON.stringify()</answer>
                    <answer correct="true">JSON.parse()</answer>
                    <answer correct="false">JSON.convert()</answer>
                    <answer correct="false">JSON.toObject()</answer>
                </answers>
            </question>
            <question id="6">
                <text>What is the purpose of the optional chaining operator (?.) in JavaScript?</text>
                <answers id="6">
                    <answer correct="true">To safely access nested object properties without causing an error</answer>
                    <answer correct="false">To create optional function parameters</answer>
                    <answer correct="false">To check if a variable is defined</answer>
                    <answer correct="false">To perform type checking</answer>
                </answers>
            </question>
        </quiz>
    </quizes>
</course>